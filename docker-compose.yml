# ============================================================================
# Xoe-NovAi Phase 1 v0.1.3 Docker Compose Configuration
# ============================================================================
# Purpose: Multi-service orchestration for RAG stack with CrawlModule
# Guide Reference: Section 6 (Complete docker-compose.yml)
# Last Updated: 2025-10-19
# Changes from v0.1.2:
#   - Added explicit directory creation guidance in comments
#   - Clarified bind mount vs named volume strategy
#   - Added troubleshooting notes for permission issues
# ============================================================================

services:
  # ==========================================================================
  # REDIS SERVICE - Cache & Streams Coordinator (7.4.1)
  # ==========================================================================
  redis:
    image: redis:7.4.1
    container_name: xnai_redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-backlog 2048
      --protected-mode no
      --dir /data
    volumes:
      - ./data/redis:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_STREAM_MAX_LEN=${REDIS_STREAM_MAX_LEN:-1000}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
    networks:
      - xnai_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:mode=1777,size=512m

  # ==========================================================================
  # RAG SERVICE - FastAPI Backend with LLM/FAISS
  # ==========================================================================
  rag:
    build:
      context: .
      dockerfile: Dockerfile.api
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: xnai_rag_api
    volumes:
      # Models (always bind mounts - large files)
      - ./models:/models:ro
      - ./embeddings:/embeddings:ro
      
      # IMPORTANT: Create these directories with correct permissions BEFORE starting:
      # sudo mkdir -p library knowledge data/faiss_index backups
      # sudo chown -R 1001:1001 library knowledge data/faiss_index backups
      
      # Development: Bind mounts (default)
      - ./library:/library
      - ./knowledge:/knowledge
      - ./data/faiss_index:/app/XNAi_rag_app/faiss_index
      - ./backups:/backups
      - ./data/prometheus-multiproc:/prometheus_data
      
      # Development: Live code reload (comment for production)
      - ./app/XNAi_rag_app:/app/XNAi_rag_app
      
      # Production: Use named volumes instead (see bottom of file)
      # - library:/library
      # - knowledge:/knowledge
      # - faiss_index:/app/XNAi_rag_app/faiss_index
      # - faiss_backup:/backups
      
    environment:
      - RAG_API_URL=http://rag:8000
      - LLM_MODEL_PATH=/models/gemma-3-4b-it-UD-Q5_K_XL.gguf
      - EMBEDDING_MODEL_PATH=/embeddings/all-MiniLM-L12-v2.Q8_0.gguf
      - RAG_PER_DOC_CHARS=${RAG_PER_DOC_CHARS:-500}
      - RAG_TOTAL_CHARS=${RAG_TOTAL_CHARS:-2048}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL:-3600}
      - ERROR_RECOVERY_ENABLED=${ERROR_RECOVERY_ENABLED:-true}
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_INTERVAL_HOURS=${BACKUP_INTERVAL_HOURS:-24}
    networks:
      - xnai_network
    ports:
      - "8000:8000"
      - "8002:8002"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "/app/XNAi_rag_app/healthcheck.py"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 180s
    restart: unless-stopped
    user: "${APP_UID}:${APP_GID}"
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - CHOWN
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:mode=1777,size=512m

  # ==========================================================================
  # UI SERVICE - Chainlit Frontend
  # ==========================================================================
  ui:
    build:
      context: .
      dockerfile: Dockerfile.chainlit
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: xnai_chainlit_ui
    volumes:
      # Development: Live code reload (comment for production)
      - ./app/XNAi_rag_app:/app/XNAi_rag_app
    environment:
      - CHAINLIT_PORT=${CHAINLIT_PORT:-8001}
      - CHAINLIT_NO_TELEMETRY=${CHAINLIT_NO_TELEMETRY:-true}
      - RAG_API_URL=${RAG_API_URL:-http://rag:8000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      rag:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
    networks:
      - xnai_network
    ports:
      - "8001:8001"
    restart: unless-stopped
    user: "${APP_UID}:${APP_GID}"
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:mode=1777,size=512m
      - /app/XNAi_rag_app/tmp:mode=1777,size=512m

  # ==========================================================================
  # CRAWLER SERVICE - CrawlModule v0.1.7
  # ==========================================================================
  crawler:
    build:
      context: .
      dockerfile: Dockerfile.crawl
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: xnai_crawler
    security_opt:
      - no-new-privileges:true
    volumes:
      # IMPORTANT: Ensure directories exist with correct permissions:
      # sudo mkdir -p library knowledge data/cache
      # sudo chown -R 1001:1001 library knowledge data/cache
      
      # Development: Bind mounts (default)
      - ./library:/library
      - ./knowledge:/knowledge
      - ./data/cache:/app/cache
      
      # Development: Live code reload (comment for production)
      - ./app/XNAi_rag_app:/app/XNAi_rag_app
      
      # Production: Use named volumes instead
      # - library:/library
      # - knowledge:/knowledge
      # - crawler_cache:/app/cache
      
    environment:
      - CRAWL4AI_NO_TELEMETRY=${CRAWL4AI_NO_TELEMETRY:-true}
      - CRAWL4AI_MAX_DEPTH=${CRAWL4AI_MAX_DEPTH:-2}
      - CRAWL_RATE_LIMIT_PER_MIN=${CRAWL_RATE_LIMIT_PER_MIN:-30}
      - CRAWL_SANITIZE_SCRIPTS=${CRAWL_SANITIZE_SCRIPTS:-true}
      - CRAWL_MAX_ITEMS=${CRAWL_MAX_ITEMS:-50}
      - CRAWL_ALLOWLIST_URLS=${CRAWL_ALLOWLIST_URLS}
      - CRAWL_CACHE_DIR=/app/cache
      - CRAWL_CACHE_TTL=${CRAWL_CACHE_TTL:-86400}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LIBRARY_PATH=/library
      - KNOWLEDGE_PATH=/knowledge
    depends_on:
      redis:
        condition: service_healthy
      rag:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import crawl4ai; print('OK')"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - xnai_network
    restart: unless-stopped
    user: "${APP_UID}:${APP_GID}"
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - CHOWN
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:mode=1777,size=512m

  curation_worker:
    build:
      context: .
      dockerfile: Dockerfile.curation_worker
    image: xnai_curation_worker:latest
    restart: on-failure
    depends_on:
      - redis
    environment:
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      QUEUE_KEY: "curation_queue"
      JOB_PREFIX: "curation:"
      LOG_DIR: "/app/logs/curations"
      DATA_DIR: "/app/data/curations"
      WORKER_NAME: "curation-worker-1"
      MAX_ATTEMPTS: "3"
    volumes:
      - ./data/curations:/app/data/curations
      - ./logs/curations:/app/logs/curations


# ============================================================================
# NETWORKS
# ============================================================================
networks:
  xnai_network:
    driver: bridge
    name: xnai_network

# ============================================================================
# VOLUMES (Named Volumes for Production)
# ============================================================================
# Uncomment this section for production deployment
# Then comment bind mounts in services above and uncomment named volume mounts
#
# volumes:
#   library:
#     driver: local
#   knowledge:
#     driver: local
#   faiss_index:
#     driver: local
#   faiss_backup:
#     driver: local
#   crawler_cache:
#     driver: local
#   redis_data:
#     driver: local
#   prometheus_multiproc:
#     driver: local

# ============================================================================
# TROUBLESHOOTING PERMISSION ISSUES
# ============================================================================
# If you encounter permission errors:
#
# 1. Verify directories exist with correct ownership:
#    sudo mkdir -p library knowledge data/faiss_index data/cache backups
#    sudo chown -R 1001:1001 library knowledge data backups
#
# 2. Check .env file has correct UID/GID:
#    APP_UID=1001
#    APP_GID=1001
#
# 3. Rebuild containers to pick up ownership changes:
#    sudo docker compose down
#    sudo docker compose build --no-cache
#    sudo docker compose up -d
#
# 4. Verify container user matches:
#    sudo docker exec xnai_rag_api id
#    # Should show: uid=1001(appuser) gid=1001(appuser)
#
# 5. Check mounted directory permissions inside container:
#    sudo docker exec xnai_rag_api ls -la /library
#    sudo docker exec xnai_crawler ls -la /library
#
# 6. If issues persist, temporarily use root user for debugging:
#    user: "0:0"  # root - ONLY FOR DEBUGGING
#
# ============================================================================