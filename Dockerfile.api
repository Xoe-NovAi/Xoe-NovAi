# ============================================================================
# Xoe-NovAi Phase 1 v0.1.3 - FastAPI RAG Service Dockerfile
# ============================================================================
# Purpose: Multi-stage production build for RAG API with LLM/FAISS
# Guide Reference: Section 6.3.1 (Dockerfile.api)
# Last Updated: 2025-10-19
# Changes from v0.1.2:
#   - Updated version label to 0.1.3
#   - Verified COPY command consistency (no trailing slashes)
#   - Added debug output for troubleshooting
# ============================================================================

# ============================================================================
# STAGE 1: BUILDER
# ============================================================================
FROM python:3.12-slim AS builder

LABEL maintainer="Xoe-NovAi Team"
LABEL version="0.1.3"
LABEL description="RAG API Builder Stage"

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# system deps needed for many compiled wheels & builds
RUN apt-get update && apt-get install -y --no-install-recommends \
      ca-certificates build-essential cmake git libopenblas-dev pkg-config curl \
    && rm -rf /var/lib/apt/lists/*

# wheelhouse support (copy directory or compressed archive into build context)
COPY wheelhouse /wheels
COPY wheelhouse.tgz /tmp/wheelhouse.tgz

RUN if [ -f /tmp/wheelhouse.tgz ]; then mkdir -p /wheels && tar -xzf /tmp/wheelhouse.tgz -C /wheels; fi \
    && if [ -d /wheels ] && [ "$(ls -A /wheels || true)" ]; then echo "wheelhouse detected with $(ls /wheels | wc -l) files"; else echo "no wheelhouse detected"; fi

ARG OFFLINE=true
ENV OFFLINE=${OFFLINE}

# Important: for compiled packages, ensure wheelhouse contains appropriate wheels built for this base image (glibc/x86_64)
RUN if [ "${OFFLINE}" = "true" ] && [ -d /wheels ] && [ "$(ls -A /wheels || true)" ]; then \
      pip install --no-index --find-links=/wheels pip setuptools wheel && \
      pip install --no-index --find-links=/wheels -r requirements-api.txt ; \
    else \
      pip install --upgrade pip setuptools wheel && \
      pip install -r requirements-api.txt ; \
    fi



RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libopenblas-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

WORKDIR /build

COPY requirements-api.txt .

# Ryzen optimization for llama-cpp-python
ENV CMAKE_ARGS="-DLLAMA_BLAS=ON -DLLAMA_BLAS_VENDOR=OpenBLAS -DLLAMA_AVX2=ON -DLLAMA_FMA=ON -DLLAMA_F16C=ON"
ENV FORCE_CMAKE=1
ENV LLAMA_CPP_NO_PYTHON=0

RUN pip install --no-cache-dir --upgrade pip setuptools wheel \
    && pip install --no-cache-dir -r requirements-api.txt

# ============================================================================
# STAGE 2: RUNTIME
# ============================================================================
FROM python:3.12-slim

RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libopenblas0 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN groupadd -g 1001 appuser && useradd -m -u 1001 -g 1001 -s /bin/bash appuser

WORKDIR /app

COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Create directory structure BEFORE copy
RUN mkdir -p /app/XNAi_rag_app/logs /app/XNAi_rag_app/faiss_index /backups /prometheus_data \
    && chown -R appuser:appuser /app /backups /prometheus_data \
    && chmod -R 755 /app /backups /prometheus_data

# Copy application code (no trailing slashes - consistent with other Dockerfiles)
COPY --chown=appuser:appuser app/XNAi_rag_app /app/XNAi_rag_app

# Verify critical files were copied
RUN test -f /app/XNAi_rag_app/main.py || (echo "ERROR: main.py not found" && ls -la /app/XNAi_rag_app && exit 1) && \
    test -f /app/XNAi_rag_app/dependencies.py || (echo "ERROR: dependencies.py not found" && exit 1)

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    LLAMA_CPP_N_THREADS=6 \
    LLAMA_CPP_F16_KV=true \
    LLAMA_CPP_USE_MLOCK=true \
    LLAMA_CPP_USE_MMAP=true \
    OMP_NUM_THREADS=1 \
    OPENBLAS_NUM_THREADS=1 \
    OPENBLAS_CORETYPE=ZEN \
    MKL_DEBUG_CPU_TYPE=5

EXPOSE 8000 8002

HEALTHCHECK --interval=30s --timeout=15s --retries=10 --start-period=180s \
    CMD python3 /app/XNAi_rag_app/healthcheck.py || exit 1

USER appuser

CMD ["uvicorn", "XNAi_rag_app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--log-level", "info"]